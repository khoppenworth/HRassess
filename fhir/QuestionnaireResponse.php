<!-- Placeholder for QuestionnaireResponse.php -->
<?php // fhir/QuestionnaireResponse.php require_once __DIR__ . '/utils.php'; require_fhir_auth(); $method = $_SERVER['REQUEST_METHOD']; if ($method === 'POST') { // accept a FHIR QuestionnaireResponse JSON body $body = file_get_contents('php://input'); $data = json_decode($body, true); if (!$data) { $resp = [ "resourceType" => "OperationOutcome", "issue" => [ ["severity"=>"error", "code"=>"invalid", "details"=>["text"=>"Invalid JSON"]] ] ]; send_json($resp, 400); } // validate structure minimally if (!isset($data['questionnaire'])) { $resp = [ "resourceType" => "OperationOutcome", "issue" => [ ["severity"=>"error", "code"=>"invalid", "details"=>["text"=>"Missing questionnaire reference"]] ] ]; send_json($resp, 400); } // map questionnaire reference (which might be e.g. Questionnaire/{id} or via url) // For simplicity expect questionnaire ends with id $qref = $data['questionnaire']; // extract questionnaire id from reference $qid = null; if (preg_match('/Questionnaire\/(\d+)/', $qref, $m)) { $qid = intval($m[1]); } else { // maybe fhir_id // lookup in DB by fhir_id $stmt = $pdo->prepare("SELECT id FROM questionnaire WHERE fhir_id = ?"); $stmt->execute([$qref]); $row = $stmt->fetch(PDO::FETCH_ASSOC); if ($row) { $qid = $row['id']; } } if (!$qid) { $resp = [ "resourceType" => "OperationOutcome", "issue" => [ ["severity"=>"error", "code"=>"not-found", "details"=>["text"=>"Questionnaire not found"]] ] ]; send_json($resp, 404); } // create new response record global $pdo; $pdo->beginTransaction(); $stmt = $pdo->prepare("INSERT INTO questionnaire_response (questionnaire_id, user_id, status) VALUES (?, ?, ?)"); $stmt->execute([$qid, $_SESSION['user_id'], $data['status'] ?? 'completed']); $resp_id = $pdo->lastInsertId(); // iterate items in response if (isset($data['item']) && is_array($data['item'])) { $stmt2 = $pdo->prepare("INSERT INTO questionnaire_response_item (response_id, item_id, answer) VALUES (?, ?, ?)"); foreach ($data['item'] as $item) { if (!isset($item['linkId'], $item['answer'])) continue; // find item_id from questionnaire_item table by link_id or id $stmtx = $pdo->prepare("SELECT id FROM questionnaire_item WHERE questionnaire_id = ? AND (link_id = ? OR id = ?)"); $possible_item_id = null; $stmtx->execute([$qid, $item['linkId'], $item['linkId']]); $r2 = $stmtx->fetch(PDO::FETCH_ASSOC); if ($r2) { $possible_item_id = $r2['id']; } if ($possible_item_id) { $answer = is_array($item['answer']) ? json_encode($item['answer']) : strval($item['answer']); $stmt2->execute([$resp_id, $possible_item_id, $answer]); } } } $pdo->commit(); // return the stored response as FHIR QuestionnaireResponse // Fetch it back $stmt3 = $pdo->prepare("SELECT * FROM questionnaire_response WHERE id = ?"); $stmt3->execute([$resp_id]); $resp_row = $stmt3->fetch(PDO::FETCH_ASSOC); // build FHIR resource to return $fhir_resp = [ "resourceType" => "QuestionnaireResponse", "id" => $resp_row['fhir_id'] ?: strval($resp_row['id']), "questionnaire" => "Questionnaire/" . $resp_row['questionnaire_id'], "status" => $resp_row['status'], "authored" => gmdate('Y-m-d\TH:i:s\Z', strtotime($resp_row['authored'])), "item" => [] ]; $stmt4 = $pdo->prepare(" SELECT q_item.link_id, q_item.text, q_item.type, qri.answer FROM questionnaire_response_item qri JOIN questionnaire_item q_item ON qri.item_id = q_item.id WHERE qri.response_id = ? ORDER BY q_item.order_no ASC "); $stmt4->execute([$resp_id]); $items2 = $stmt4->fetchAll(PDO::FETCH_ASSOC); foreach ($items2 as $itm) { $f_item = [ "linkId" => $itm['link_id'] ?: strval($itm['link_id']), "text" => $itm['text'], ]; // mapping answer type // For simplicity put into answer > answer.valueString $f_item["answer"] = [ "valueString" => $itm['answer'] ]; $fhir_resp['item'][] = $f_item; } send_json($fhir_resp, 201); } else if ($method === 'GET') { // GET /fhir/QuestionnaireResponse?user=<id> or ?response_id=<id> if (isset($_GET['response_id'])) { $rid = (int)$_GET['response_id']; // similar to above: fetch single response // [code omitted for brevity; build FHIR resource] // ... } else if (isset($_GET['user'])) { $uid = (int)$_GET['user']; // fetch responses for that user, return as Bundle $stmt = $pdo->prepare(" SELECT * FROM questionnaire_response WHERE user_id = ? ORDER BY authored DESC "); $stmt->execute([$uid]); $responses = $stmt->fetchAll(PDO::FETCH_ASSOC); $bundle = [ "resourceType" => "Bundle", "type" => "searchset", "entry" => [] ]; foreach ($responses as $rc) { $bundle['entry'][] = [ "resource" => [ // for each, build minimal QuestionnaireResponse "resourceType" => "QuestionnaireResponse", "id" => $rc['fhir_id'] ?: strval($rc['id']), "questionnaire" => "Questionnaire/" . $rc['questionnaire_id'], "status" => $rc['status'], "authored" => gmdate('Y-m-d\TH:i:s\Z', strtotime($rc['authored'])) // could include item answers via join as above ] ]; } send_json($bundle); } else { $resp = [ "resourceType" => "OperationOutcome", "issue" => [ ["severity"=>"error","code"=>"invalid","details"=>["text"=>"Missing response_id or user parameter"]] ] ]; send_json($resp, 400); } } else { // unsupported method $resp = [ "resourceType" => "OperationOutcome", "issue" => [ ["severity"=>"error","code"=>"not-supported","details"=>["text"=>"Method not allowed"]] ] ]; send_json($resp, 405); } 
